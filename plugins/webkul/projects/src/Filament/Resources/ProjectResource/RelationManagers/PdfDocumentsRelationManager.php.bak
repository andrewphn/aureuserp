<?php

namespace Webkul\Project\Filament\Resources\ProjectResource\RelationManagers;

use App\Filament\Forms\Components\PdfViewerField;
use App\Models\PdfDocument;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Tables;
use Filament\Tables\Table;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Storage;

class PdfDocumentsRelationManager extends RelationManager
{
    protected static string $relationship = 'pdfDocuments';

    protected static ?string $title = 'Project Documents';

    protected static ?string $recordTitleAttribute = 'title';

    public function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make('Document Information')
                    ->schema([
                        Forms\Components\TextInput::make('title')
                            ->required()
                            ->maxLength(255)
                            ->placeholder('Enter document title'),

                        Forms\Components\Textarea::make('description')
                            ->rows(3)
                            ->maxLength(1000)
                            ->placeholder('Enter document description'),

                        Forms\Components\FileUpload::make('file_path')
                            ->label('PDF File')
                            ->disk('public')
                            ->directory('pdf-documents')
                            ->acceptedFileTypes(['application/pdf'])
                            ->maxSize(51200) // 50MB
                            ->required()
                            ->downloadable()
                            ->openable()
                            ->helperText('Maximum file size: 50MB. Accepted format: PDF only.'),

                        Forms\Components\Select::make('folder_id')
                            ->relationship('folder', 'name')
                            ->searchable()
                            ->preload()
                            ->createOptionForm([
                                Forms\Components\TextInput::make('name')
                                    ->required()
                                    ->maxLength(255),
                                Forms\Components\Textarea::make('description')
                                    ->rows(2),
                            ])
                            ->nullable(),

                        Forms\Components\Select::make('category_id')
                            ->relationship('category', 'name')
                            ->searchable()
                            ->preload()
                            ->createOptionForm([
                                Forms\Components\TextInput::make('name')
                                    ->required()
                                    ->maxLength(255),
                                Forms\Components\ColorPicker::make('color')
                                    ->default('#3b82f6'),
                            ])
                            ->nullable(),

                        Forms\Components\TagsInput::make('tags')
                            ->placeholder('Add tags')
                            ->helperText('Press Enter after each tag'),

                        Forms\Components\Toggle::make('is_public')
                            ->label('Public Document')
                            ->helperText('Allow all users to view this document')
                            ->default(false),
                    ])
                    ->columns(2),

                Forms\Components\Section::make('PDF Viewer')
                    ->schema([
                        PdfViewerField::make('id')
                            ->label('Document Preview')
                            ->documentId(fn ($record) => $record?->id)
                            ->fullEditor()
                            ->height('700px')
                            ->visible(fn ($record) => $record !== null && $record->file_path !== null),
                    ])
                    ->collapsible()
                    ->collapsed(false),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->recordTitleAttribute('title')
            ->columns([
                Tables\Columns\TextColumn::make('title')
                    ->searchable()
                    ->sortable()
                    ->limit(30)
                    ->description(fn (PdfDocument $record) => $record->description),

                Tables\Columns\TextColumn::make('folder.name')
                    ->label('Folder')
                    ->badge()
                    ->color('gray')
                    ->default('None'),

                Tables\Columns\TextColumn::make('category.name')
                    ->label('Category')
                    ->badge()
                    ->color(fn ($record) => $record->category?->color ?? 'primary')
                    ->default('None'),

                Tables\Columns\TextColumn::make('file_size')
                    ->label('Size')
                    ->formatStateUsing(fn ($state) => number_format($state / 1024, 2) . ' KB')
                    ->sortable(),

                Tables\Columns\IconColumn::make('is_public')
                    ->label('Public')
                    ->boolean(),

                Tables\Columns\TextColumn::make('uploader.name')
                    ->label('Uploaded By')
                    ->searchable()
                    ->sortable()
                    ->toggleable(isToggledHiddenByDefault: true),

                Tables\Columns\TextColumn::make('created_at')
                    ->label('Uploaded')
                    ->dateTime()
                    ->sortable(),
            ])
            ->filters([
                Tables\Filters\SelectFilter::make('folder_id')
                    ->label('Folder')
                    ->relationship('folder', 'name')
                    ->multiple()
                    ->preload(),

                Tables\Filters\SelectFilter::make('category_id')
                    ->label('Category')
                    ->relationship('category', 'name')
                    ->multiple()
                    ->preload(),

                Tables\Filters\TernaryFilter::make('is_public')
                    ->label('Public Documents')
                    ->placeholder('All documents')
                    ->trueLabel('Public only')
                    ->falseLabel('Private only'),
            ])
            ->headerActions([
                Tables\Actions\CreateAction::make()
                    ->mutateFormDataUsing(function (array $data): array {
                        // Set uploaded_by to current user
                        $data['uploaded_by'] = Auth::id();

                        // Get file size if file was uploaded
                        if (isset($data['file_path']) && $data['file_path']) {
                            $filePath = Storage::disk('public')->path($data['file_path']);
                            if (file_exists($filePath)) {
                                $data['file_size'] = filesize($filePath);
                            }
                        }

                        // Set MIME type
                        $data['mime_type'] = 'application/pdf';

                        // Default page count
                        $data['page_count'] = 0;

                        return $data;
                    }),
            ])
            ->actions([
                Tables\Actions\ViewAction::make()
                    ->modalHeading(fn (PdfDocument $record) => 'View: ' . $record->title)
                    ->modalContent(fn (PdfDocument $record) => view('filament.modals.pdf-viewer', [
                        'documentId' => $record->id,
                        'documentUrl' => Storage::url($record->file_path),
                    ])),

                Tables\Actions\EditAction::make(),

                Tables\Actions\DeleteAction::make(),

                Tables\Actions\Action::make('download')
                    ->icon('heroicon-o-arrow-down-tray')
                    ->url(fn (PdfDocument $record) => Storage::url($record->file_path))
                    ->openUrlInNewTab(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ])
            ->defaultSort('created_at', 'desc');
    }
}
